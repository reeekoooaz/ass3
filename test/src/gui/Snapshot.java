package gui;

import java.time.LocalDateTime;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.highgui.Highgui;
import static org.opencv.highgui.Highgui.CV_CAP_PROP_SETTINGS;
import org.opencv.highgui.VideoCapture;

public class Snapshot extends javax.swing.JFrame {

    public static String IMAGE_PATH = "C:\\images";
    public static int AUTO_PIC_PER_MS = 1000 * 30;
    private Timer timerShowTime;
    private Timer timerAutoPic;
    private static int IMAGE_WIDTH = 640;
    private static int IMAGE_HEIGHT = 480;

    // definitions
    private DaemonThread myThread = null;
    int count = 0;
    VideoCapture webSource = null;
    LocalDateTime d = LocalDateTime.now();

    Mat frame = new Mat();
    MatOfByte mem = new MatOfByte();

    // thread class
    class DaemonThread implements Runnable {

        protected volatile boolean runnable = false;

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    if (webSource.grab()) {
                        try {
                            webSource.retrieve(frame);
                            Highgui.imencode(".bmp", frame, mem);
                            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));

                            BufferedImage buff = (BufferedImage) im;
                            Graphics g = jPanel1.getGraphics();

                            if (g.drawImage(buff, 0, 0, getWidth(), getHeight() - 150, 0, 0, buff.getWidth(), buff.getHeight(), null)) {
                                if (runnable == false) {
                                    System.out.println("Going to wait()");
                                    this.wait();
                                }
                            }
                        } catch (Exception ex) {
                            System.out.println("Error");
                        }
                    }
                }
            }
        }
    }

    public Snapshot() throws InterruptedException {
        initComponents();
        showTime();
        autoPic();
        jButton1ActionPerformed(null);

    }
    static SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    static SimpleDateFormat timeFormat = new SimpleDateFormat("hh:mm:ss a");

    private void showTime() throws InterruptedException {
        timerShowTime = new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                Date d = new Date();
                timeLab.setText(timeFormat.format(d));
                dateLab.setText(dateFormat.format(d));

            }
        });

        timerShowTime.start();

    }

    private void autoPic() throws InterruptedException {
        //System.out.println("AUTO PIC...");
        //int min = 1;
        //double g = ((1 * 1000) * 60) * AUTO_PIC_PER_MIN;
        timerAutoPic = new Timer(AUTO_PIC_PER_MS, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                takeAPic();
            }
        });

        timerAutoPic.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        dateLab = new javax.swing.JLabel();
        timeLab = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 623, Short.MAX_VALUE)
        );

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Pause");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Take snapshot");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        dateLab.setText("Date");

        timeLab.setText("Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(dateLab, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeLab, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateLab, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addComponent(timeLab))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton3)
                        .addComponent(jButton2))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        webSource = new VideoCapture(0); //Load capture from default cam(0),,for the usb webcam we change it to (1)
        webSource.set(CV_CAP_PROP_SETTINGS, 1);
        // webSource.set(3, 1280); // set the Horizontal resolution
        //webSource.set(4, 720); // Set the Vertical resolution
        // webSource.set(Highgui.CV_CAP_PROP_FRAME_WIDTH, 1080);//resolution WIDTH
        // webSource.set(Highgui.CV_CAP_PROP_FRAME_HEIGHT, 720);//resolution HEIGHT
        webSource.set(Highgui.CV_CAP_PROP_FRAME_WIDTH, IMAGE_WIDTH);//resolution WIDTH
        webSource.set(Highgui.CV_CAP_PROP_FRAME_HEIGHT, IMAGE_HEIGHT);//resolution HEIGHT
//        
        myThread = new DaemonThread();
        Thread t = new Thread(myThread);
        t.setDaemon(true);
        myThread.runnable = true;
        t.start();
        jButton1.setEnabled(false);  //start button
        jButton2.setEnabled(true);  // stop button

        if (timerAutoPic.isRunning() == false) {
            timerAutoPic.start();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        myThread.runnable = false;
        timerAutoPic.stop();
        jButton2.setEnabled(false);
        jButton1.setEnabled(true);
        webSource.release();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void takeAPic() {

        //File folder = new File("C:\\Users\\sanad\\Desktop\\image", dateLab.getText().replace("-", "_"));
        File folder = new File(IMAGE_PATH, dateLab.getText().replace("-", "_"));
        if (folder.exists() == false) {
            folder.mkdir();
        }

        File file = (new File(folder, dateLab.getText().replace("-", "_") + "_" + timeLab.getText().replace(":", "_") + ".jpg"));

        Highgui.imwrite(file.getPath(), frame); // save frame -image- to this path
        System.out.println(file.getAbsoluteFile() + " has been auto saved.");

    }


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //jFileChooser1.setCurrentDirectory(new File("C:\\Users\\sanad\\Desktop\\image"));
        jFileChooser1.setCurrentDirectory(new File(IMAGE_PATH));
        jFileChooser1.setSelectedFile(new File(dateLab.getText().replace("-", "_") + "_" + timeLab.getText().replace(":", "_") + ".jpg"));
        int returnVal = jFileChooser1.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile(); // get path from save dialog
            Highgui.imwrite(file.getPath(), frame); // save frame -image- to this path
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void main(String args[]) throws FileNotFoundException, IOException {

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME); // load native library of opencv

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Snapshot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    Snapshot snapshot = new Snapshot();
                    snapshot.setVisible(true);

                    snapshot.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
                    snapshot.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    snapshot.addWindowListener(new WindowAdapter() {
                        public void windowClosing(WindowEvent we) {
                            System.out.println("Bye :)");

                            System.exit(0);
                        }
                    });
                } catch (InterruptedException ex) {
                    Logger.getLogger(Snapshot.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }

    public static String getFileName() {
        return "zzzz";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateLab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel timeLab;
    // End of variables declaration//GEN-END:variables
}
